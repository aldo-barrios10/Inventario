-- MySQL Script generated by MySQL Workbench
-- Tue Jul 18 16:19:02 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering
-- Author Aldo Barrios García

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema inggraph
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema inggraph
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `inggraph` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `inggraph` ;

-- -----------------------------------------------------
-- Table `inggraph`.`rol`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `inggraph`.`rol` ;

CREATE TABLE IF NOT EXISTS `inggraph`.`rol` (
  `id_rol` INT NOT NULL AUTO_INCREMENT,
  `rol` VARCHAR(50) CHARACTER SET 'utf8mb3' NOT NULL,
  PRIMARY KEY (`id_rol`))
ENGINE = InnoDB
AUTO_INCREMENT = 4;


INSERT INTO `inggraph`.`rol` (`id_rol`, `rol`) VALUES
(1, 'Administrador'),
(2, 'Vendedor'),
(3, 'Asistente'),
(10, 'Inactivo');


-- -----------------------------------------------------
-- Table `inggraph`.`usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `inggraph`.`usuario` ;

CREATE TABLE IF NOT EXISTS `inggraph`.`usuario` (
  `id_usuario` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(100) CHARACTER SET 'utf8mb3' NOT NULL,
  `ap_paterno` VARCHAR(100) CHARACTER SET 'utf8mb3' NOT NULL,
  `ap_materno` VARCHAR(100) CHARACTER SET 'utf8mb3',
  `correo` VARCHAR(100) CHARACTER SET 'utf8mb3' NOT NULL,
  `usuario` VARCHAR(20) CHARACTER SET 'utf8mb3' NOT NULL,
  `clave` VARCHAR(50) CHARACTER SET 'utf8mb3' NOT NULL,
  `rol_id` INT NOT NULL,
  PRIMARY KEY (`id_usuario`),
  INDEX `fk_usuario_rol1_idx` (`rol_id` ASC) VISIBLE,
  CONSTRAINT `fk_usuario_rol1`
    FOREIGN KEY (`rol_id`)
    REFERENCES `inggraph`.`rol` (`id_rol`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 11;

INSERT INTO `inggraph`.`usuario` (`id_usuario`, `nombre`,`ap_paterno`,`ap_materno`, `correo`, `usuario`, `clave`, `rol_id`) VALUES
(1, 'John', 'Doe', '', 'john.doe@example.com', 'john_doe', MD5('password1'), 1),
(2, 'Jane', 'Smith', '', 'jane.smith@example.com', 'jane_smith', MD5('password2'), 2),
(3, 'Carlos', 'Pérez', 'García', 'carlos.perez@example.com', 'carlos_perez', MD5('password3'), 3),
(4, 'Laura', 'González', 'Martínez', 'laura.gonzalez@example.com', 'laura_gonzalez', MD5('password4'), 10),
(5, 'Miguel', 'López', '', 'miguel.lopez@example.com', 'miguel_lopez', MD5('password5'), 1);

-- (1, 'ING-GRAPH',' ','', 'admin@ing-graph.com', 'admin', '21232f297a57a5a743894a0e4a801fc3', 1),
-- (6, 'Juan','Martínez','García', 'ventas@ing-graph.com', 'juan', 'a94652aa97c7211ba8954dd15a3cf838', 2);



-- -----------------------------------------------------
-- Table `inggraph`.`cliente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `inggraph`.`cliente` ;

CREATE TABLE IF NOT EXISTS `inggraph`.`cliente` (
  `id_cliente` INT NOT NULL AUTO_INCREMENT,
  `rfc` VARCHAR(12) COLLATE 'utf8mb3_spanish_ci' NOT NULL,
  `nombre` VARCHAR(100) CHARACTER SET 'utf8mb3' NOT NULL,
  `telefono` VARCHAR(20) COLLATE 'utf8mb3_spanish_ci' NOT NULL,
  `colonia` VARCHAR(80) CHARACTER SET 'utf8mb3' NOT NULL,
  `calle` VARCHAR(80) CHARACTER SET 'utf8mb3' NOT NULL,
  `numero_ext` VARCHAR(5) CHARACTER SET 'utf8mb3' NOT NULL,
  `numero_int` VARCHAR(5) CHARACTER SET 'utf8mb3' ,
  `usuario_id` INT NOT NULL,
  PRIMARY KEY (`id_cliente`),
  INDEX `fk_cliente_usuario1_idx` (`usuario_id` ASC) VISIBLE,
  CONSTRAINT `fk_cliente_usuario1`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `inggraph`.`usuario` (`id_usuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 3;


INSERT INTO `inggraph`.`cliente` (`id_cliente`, `rfc`, `nombre`, `telefono`, `colonia`,`calle`,`numero_ext`,`numero_int`, `usuario_id`) VALUES
(1, 'ABC123456XYZ', 'Cliente1', '555-1234', 'Centro', 'Calle Principal', '123', 'A', 1),
(2, 'DEF789012UVW', 'Cliente2', '555-5678', 'Norte', 'Avenida Secundaria', '456', '', 2),
(3, 'GHI345678JKL', 'Cliente3', '555-9012', 'Sur', 'Calle Secundaria', '789', 'B', 3),
(4, 'MNO901234PQR', 'Cliente4', '555-3456', 'Este', 'Avenida Principal', '012', '', 4),
(5, 'STU567890VWX', 'Cliente5', '555-7890', 'Oeste', 'Avenida Principal', '345', 'C', 5);

-- (1, 'EJM951103H34', 'Pubico en general', '5554000000', 'Nueva Vallejo','Calle 19','321','', 1),
-- (2, 'EJM953250H11', 'Empresa 1', '5554000000', 'Nueva Vallejo','Calle 5','382','2', 1);



-- -----------------------------------------------------
-- Table `inggraph`.`entradas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `inggraph`.`entradas` ;

CREATE TABLE IF NOT EXISTS `inggraph`.`entradas` (
  `id_entrada` INT NOT NULL AUTO_INCREMENT,
  `id_producto` INT NOT NULL,
  `fecha` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `cantidad` INT NOT NULL,
  `precio` DECIMAL(10,2) NOT NULL,
  `usuario_id` INT NOT NULL,
  PRIMARY KEY (`id_entrada`),
  INDEX `fk_entradas_usuario1_idx` (`usuario_id` ASC) VISIBLE,
  CONSTRAINT `fk_entradas_usuario1`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `inggraph`.`usuario` (`id_usuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 9;


-- -----------------------------------------------------
-- Table `inggraph`.`factura`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `inggraph`.`factura` ;

CREATE TABLE IF NOT EXISTS `inggraph`.`factura` (
  `id_factura` INT NOT NULL AUTO_INCREMENT,
  `fecha` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `totalfactura` DECIMAL(10,2) NOT NULL,
  `estado` INT NOT NULL DEFAULT '1',
  `usuario_id` INT NOT NULL,
  `cliente_id` INT NOT NULL,
  PRIMARY KEY (`id_factura`),
  INDEX `fk_factura_usuario1_idx` (`usuario_id` ASC) VISIBLE,
  INDEX `fk_factura_cliente1_idx` (`cliente_id` ASC) VISIBLE,
  CONSTRAINT `fk_factura_usuario1`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `inggraph`.`usuario` (`id_usuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_factura_cliente1`
    FOREIGN KEY (`cliente_id`)
    REFERENCES `inggraph`.`cliente` (`id_cliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `inggraph`.`proveedor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `inggraph`.`proveedor` ;

CREATE TABLE IF NOT EXISTS `inggraph`.`proveedor` (
  `id_proveedor` INT NOT NULL AUTO_INCREMENT,
  `razon_social` VARCHAR(100) CHARACTER SET 'utf8mb3' NOT NULL,
  `telefono` VARCHAR(20) COLLATE 'utf8mb3_spanish_ci' NOT NULL,
  `colonia` VARCHAR(80) CHARACTER SET 'utf8mb3' NOT NULL,
  `calle` VARCHAR(80) CHARACTER SET 'utf8mb3' NOT NULL,
  `numero_ext` VARCHAR(5) CHARACTER SET 'utf8mb3' NOT NULL,
  `numero_int` VARCHAR(5) CHARACTER SET 'utf8mb3' ,
  `usuario_id` INT NOT NULL,
  PRIMARY KEY (`id_proveedor`),
  INDEX `fk_proveedor_usuario1_idx` (`usuario_id` ASC) VISIBLE,
  CONSTRAINT `fk_proveedor_usuario1`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `inggraph`.`usuario` (`id_usuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 12;

INSERT INTO `inggraph`.`proveedor` (`id_proveedor`, `razon_social`,`telefono`, `colonia`,`calle`,`numero_ext`,`numero_int`, `usuario_id`) VALUES
(1, 'Proveedor1 S.A. de C.V.', '555-1234', 'Centro', 'Calle Principal', '123', 'A', 1),
(2, 'Proveedor2 S.A. de C.V.', '555-5678', 'Norte', 'Avenida Secundaria', '456', '', 2),
(3, 'Proveedor3 S.A. de C.V.', '555-9012', 'Sur', 'Calle Secundaria', '789', 'B', 3),
(4, 'Proveedor4 S.A. de C.V.', '555-3456', 'Este', 'Avenida Principal', '012', '', 4),
(5, 'Proveedor5 S.A. de C.V.', '555-7890', 'Oeste', 'Avenida Principal', '345', 'C', 5);



-- -----------------------------------------------------
-- Table `inggraph`.`producto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `inggraph`.`producto` ;

CREATE TABLE IF NOT EXISTS `inggraph`.`producto` (
  `id_producto` INT NOT NULL AUTO_INCREMENT,
  `descripcion` VARCHAR(200) CHARACTER SET 'utf8mb3' NOT NULL,
  `precio` DECIMAL(10,2) NOT NULL,
  `existencia` INT NOT NULL,
  `usuario_id` INT NOT NULL,
  `proveedor_id` INT NOT NULL,
  PRIMARY KEY (`id_producto`),
  INDEX `fk_producto_proveedor_idx` (`proveedor_id` ASC) VISIBLE,
  CONSTRAINT `fk_producto_proveedor`
    FOREIGN KEY (`proveedor_id`)
    REFERENCES `inggraph`.`proveedor` (`id_proveedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 11;



INSERT INTO `inggraph`.`producto` (`id_producto`, `descripcion`, `proveedor_id`, `precio`, `existencia`, `usuario_id`) VALUES
(1, 'Producto1', 1, 19.99, 100, 1),
(2, 'Producto2', 2, 29.99, 50, 2),
(3, 'Producto3', 3, 39.99, 75, 3),
(4, 'Producto4', 4, 49.99, 120, 4),
(5, 'Producto5', 5, 59.99, 80, 5),
(6, 'Producto6', 1, 24.99, 90, 1),
(7, 'Producto7', 2, 34.99, 60, 2),
(8, 'Producto8', 3, 44.99, 110, 3),
(9, 'Producto9', 4, 54.99, 70, 4),
(10, 'Producto10', 5, 64.99, 95, 5),
(11, 'Producto11', 1, 27.99, 85, 1),
(12, 'Producto12', 2, 37.99, 40, 2),
(13, 'Producto13', 3, 47.99, 105, 3),
(14, 'Producto14', 4, 57.99, 65, 4),
(15, 'Producto15', 5, 67.99, 100, 5),
(16, 'Producto16', 1, 22.99, 110, 1),
(17, 'Producto17', 2, 32.99, 75, 2),
(18, 'Producto18', 3, 42.99, 95, 3),
(19, 'Producto19', 4, 52.99, 55, 4),
(20, 'Producto20', 5, 62.99, 120, 5);


-- -----------------------------------------------------
-- Table `inggraph`.`detallefactura`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `inggraph`.`detallefactura` ;

CREATE TABLE IF NOT EXISTS `inggraph`.`detallefactura` (
  `id_detalle` bigint(20) NOT NULL auto_increment,
  `factura_id` int(11) NOT NULL,
  `producto_id` int(11) NOT NULL,
  `cantidad` int(11) NOT NULL,
  `precio_venta` decimal(10,2) NOT NULL,
  PRIMARY KEY (`id_detalle`),
  INDEX `fk_detallefactura_factura_idx` (`factura_id` ASC) VISIBLE,
  CONSTRAINT `fk_detallefactura_factura`
    FOREIGN KEY (`factura_id`)
    REFERENCES `inggraph`.`factura` (`id_factura`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_detallefactura_producto`
    FOREIGN KEY (`producto_id`)
    REFERENCES `inggraph`.`producto` (`id_producto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_spanish_ci;


-- -----------------------------------------------------
-- create user
-- -----------------------------------------------------

-- Este solo es un ejemplo, la contraseña debe de ser más segura.
CREATE USER 'ventas_ing_graph'@'%' IDENTIFIED BY 'ventas123';
GRANT SELECT, INSERT, UPDATE, DELETE ON inggraph.* TO 'ventas_ing_graph'@'%';

GRANT SELECT, INSERT, UPDATE, DELETE ON inggraph.* TO 'ventas_ing_graph'@'%';



-- -----------------------------------------------------
-- procedure add_producto
-- -----------------------------------------------------

USE `inggraph`;
DROP procedure IF EXISTS `inggraph`.`add_producto`;

DELIMITER $$
USE `inggraph`$$
CREATE DEFINER=`ventas_ing_graph`@`%` PROCEDURE `add_producto`(IN p_producto_id int(11), IN p_cantidad int(11), IN p_precio decimal(10,2), IN p_usuario_id int(11))
BEGIN
	INSERT INTO entradas(id_producto,cantidad,precio,usuario_id) 
    VALUES (p_producto_id, p_cantidad, p_precio, p_usuario_id);
    
    UPDATE producto set existencia=p_cantidad,precio=p_precio 
    where id_producto=p_producto_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtener_proveedor
-- -----------------------------------------------------

USE `inggraph`;
DROP procedure IF EXISTS `inggraph`.`obtener_proveedor`;

DELIMITER $$
USE `inggraph`$$
CREATE DEFINER=`ventas_ing_graph`@`%` PROCEDURE `obtener_proveedor`()
BEGIN
    SELECT id_proveedor, razon_social, telefono, colonia,calle,numero_ext, numero_int FROM proveedor ORDER BY razon_social;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtener_usuario
-- -----------------------------------------------------

USE `inggraph`;
DELIMITER $$
USE `inggraph`$$
CREATE DEFINER=`ventas_ing_graph`@`%` PROCEDURE `obtener_usuario`(IN p_usuario VARCHAR(40), IN p_clave VARCHAR(40))
BEGIN
    SELECT u.id_usuario, u.nombre, u.correo, u.usuario, r.id_rol, r.rol
    FROM usuario u
    INNER JOIN rol r ON u.rol_id = r.id_rol
    WHERE u.usuario = p_usuario AND u.clave = p_clave;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtener_ventas
-- -----------------------------------------------------

USE `inggraph`;
DROP procedure IF EXISTS `inggraph`.`obtener_ventas`;

DELIMITER $$
USE `inggraph`$$
CREATE DEFINER=`ventas_ing_graph`@`%` PROCEDURE `obtener_ventas`()
BEGIN
    SELECT id_factura, fecha,cliente_id, totalfactura, estado FROM factura ORDER BY id_factura DESC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_cliente
-- -----------------------------------------------------

USE `inggraph`;
DROP procedure IF EXISTS `inggraph`.`update_cliente`;

DELIMITER $$
USE `inggraph`$$
CREATE DEFINER=`ventas_ing_graph`@`%` PROCEDURE `update_cliente`(IN p_id_cliente int(11), in p_rfc varchar(12), in p_nombre varchar(100), in p_telefono varchar(20), in p_colonia varchar(80), in p_calle varchar(80),in p_num_ext varchar(5),in p_num_int varchar(5))
BEGIN
    UPDATE cliente 
    SET rfc=p_rfc, telefono=p_telefono, nombre=p_nombre,colonia=p_colonia, calle=p_calle,numero_ext=p_num_ext, numero_int=p_num_int 
    where id_cliente=p_id_cliente;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_producto
-- -----------------------------------------------------

USE `inggraph`;
DROP procedure IF EXISTS `inggraph`.`update_producto`;

DELIMITER $$
USE `inggraph`$$
CREATE DEFINER=`ventas_ing_graph`@`%` PROCEDURE `update_producto`(IN p_producto varchar(200), IN  p_precio decimal(10,2), p_proveedor_id int(11), IN p_id_producto int(11))
BEGIN
    UPDATE producto 
    SET descripcion=p_producto, precio=p_precio, proveedor_id=p_proveedor_id
    where id_producto=p_id_producto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_proveedor
-- -----------------------------------------------------

USE `inggraph`;
DROP procedure IF EXISTS `inggraph`.`update_proveedor`;

DELIMITER $$
USE `inggraph`$$
CREATE DEFINER=`ventas_ing_graph`@`%` PROCEDURE `update_proveedor`(IN p_proveedor varchar(100), IN  p_telefono VARCHAR(20), IN p_colonia VARCHAR(80), IN p_calle VARCHAR(80),IN p_num_ext VARCHAR(5),IN p_num_int VARCHAR(5),   IN p_usuario_id INT(11), IN p_id_proveedor INT(11))
BEGIN
    UPDATE proveedor 
    SET proveedor=p_proveedor, telefono=p_telefono ,colonia=p_colonia,calle=p_calle,numero_ext=p_num_ext, numero_int=p_num_int, usuario_id=p_usuario_id
    where id_proveedor=p_id_proveedor;
END$$

DELIMITER ;


-- -----------------------------------------------------
-- procedure update_usuario
-- -----------------------------------------------------

DELIMITER $$
USE `inggraph`$$
CREATE DEFINER=`ventas_ing_graph`@`%` PROCEDURE `update_usuario`(IN p_id_usuario int(11), IN  p_id_rol int(11), IN p_usuario varchar(20), IN p_correo varchar(100))
BEGIN
    UPDATE usuario 
    SET rol_id=p_id_rol, correo=p_correo ,usuario=p_usuario
    where id_usuario=p_id_usuario;
END$$

DELIMITER ;


-- -----------------------------------------------------
-- procedure uRealizarCompra
-- -----------------------------------------------------

DELIMITER $$

CREATE PROCEDURE `RealizarCompra`(
    IN productosCompra JSON,
    IN compraTotal DECIMAL(10, 2),
    IN p_usuario_id INT,
    IN p_cliente_id INT
)
BEGIN
    DECLARE cantidadProducto INT;
    DECLARE exist INT;
    DECLARE idProducto INT;
    DECLARE contador INT DEFAULT 0;
    DECLARE fechaEjecucion DATE;
    DECLARE cancelarCompra BOOLEAN DEFAULT FALSE;

    START TRANSACTION;
    REPEAT
        SET idProducto = JSON_UNQUOTE(JSON_EXTRACT(productosCompra, CONCAT('$[', contador, '][0]')));
        SET cantidadProducto = JSON_UNQUOTE(JSON_EXTRACT(productosCompra, CONCAT('$[', contador, '][1]')));
        SET fechaEjecucion = NOW();
        
        SELECT existencia INTO exist FROM producto WHERE id_producto = idProducto;
        IF exist >= cantidadProducto THEN
            UPDATE producto SET existencia = exist - cantidadProducto WHERE id_producto = idProducto;
        ELSE
            SET cancelarCompra = TRUE;
        END IF;

        SET contador = contador + 1;

    UNTIL contador >= (SELECT JSON_LENGTH(productosCompra)) END REPEAT;

    IF NOT cancelarCompra THEN
        INSERT INTO factura(fecha, totalfactura, estado, usuario_id, cliente_id)
        VALUES (fechaEjecucion, compraTotal, 1, p_usuario_id, p_cliente_id);

        SET @venta_id = LAST_INSERT_ID();
    END IF;

    CREATE TEMPORARY TABLE IF NOT EXISTS tmp_detallefactura (
        producto_id INT,
        cantidad INT,
        precio DECIMAL(10, 2)
    );
    SET contador = 0;
    REPEAT
        SET idProducto = JSON_UNQUOTE(JSON_EXTRACT(productosCompra, CONCAT('$[', contador, '][0]')));
        SET cantidadProducto = JSON_UNQUOTE(JSON_EXTRACT(productosCompra, CONCAT('$[', contador, '][1]')));

        SELECT precio INTO @precioProducto FROM producto WHERE id_producto = idProducto;

        IF @precioProducto IS NOT NULL THEN
            INSERT INTO tmp_detallefactura (producto_id, cantidad, precio)
            VALUES (idProducto, cantidadProducto, @precioProducto);
        ELSE
            SIGNAL SQLSTATE '45000';
            SET cancelarCompra = TRUE;
        END IF;

        SET contador = contador + 1;

    UNTIL contador >= (SELECT JSON_LENGTH(productosCompra)) END REPEAT;

    IF NOT cancelarCompra THEN
        INSERT INTO detallefactura (factura_id, producto_id, cantidad, precio_venta)
        SELECT @venta_id, producto_id, cantidad, precio FROM tmp_detallefactura;
    END IF;

    DROP TEMPORARY TABLE IF EXISTS tmp_detallefactura;

    IF cancelarCompra THEN
        ROLLBACK;
    ELSE
        COMMIT;
    END IF;

END $$
DELIMITER ;


-- -----------------------------------------------------
-- grant procedure permission
-- -----------------------------------------------------

GRANT EXECUTE ON PROCEDURE inggraph.add_producto TO 'ventas_ing_graph'@'%';

GRANT EXECUTE ON PROCEDURE inggraph.obtener_usuario TO 'ventas_ing_graph'@'%';
GRANT EXECUTE ON PROCEDURE inggraph.obtener_proveedor TO 'ventas_ing_graph'@'%';
GRANT EXECUTE ON PROCEDURE inggraph.obtener_usuario TO 'ventas_ing_graph'@'%';
GRANT EXECUTE ON PROCEDURE inggraph.obtener_ventas TO 'ventas_ing_graph'@'%';

GRANT EXECUTE ON PROCEDURE inggraph.update_cliente TO 'ventas_ing_graph'@'%';
GRANT EXECUTE ON PROCEDURE inggraph.update_producto TO 'ventas_ing_graph'@'%';
GRANT EXECUTE ON PROCEDURE inggraph.update_proveedor TO 'ventas_ing_graph'@'%';
GRANT EXECUTE ON PROCEDURE inggraph.update_usuario TO 'ventas_ing_graph'@'%';

GRANT EXECUTE ON PROCEDURE inggraph.RealizarCompra TO 'ventas_ing_graph'@'%';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

